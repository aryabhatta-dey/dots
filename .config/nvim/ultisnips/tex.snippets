global !p

texMathZones = ['texMathZone' + x for x in ['', 'X', 'XX', 'Env', 'EnvStarred', 'Ensured']]
texIgnoreMathZones = ['texMathTextArg']
texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")
ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False
endglobal

snippet beg "begin{} / end{}" bA
\\begin{$1}
	$2
\\end{$1}
$0
endsnippet

snippet beq "begin{} / end{}" bA
\\begin{equation}
	$1
\\end{equation}
$0
endsnippet

snippet $ "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dd "Math" wA
\[
${1:${VISUAL}}
\]$0
endsnippet

# Fractions
# // 	→ 	\frac{}{}
# df/ 	→ 	\frac{df}{}
# 4\pi^2/ 	→ 	\frac{4\pi^2}{}
# (1 + 2 + 3)/ 	→ 	\frac{1 + 2 + 3}{}
# (1+(2+3)/) 	→ 	(1 + \frac{2+3}{})
# (1 + (2+3))/ 	→ 	\frac{1 + (2+3)}{}
# for visually selecting something as numerator visually select it. Press tab. /. Tab again. 

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

# End of fraction snippets

# Sympy
# type sym python-code sym to replace the python code with the evaluated form of the expression in latex form using sympy
# the \\text{} block is needed to avoid further expansion of the python code by ultisnips mistaking it for tex snippets
# the sym $1 sym will automatically trigger the next sympy snippet given below which does the heavy lifting. This is due to how ultisnips is made 
# use the <c-o><leader>u keybinding while staying in insert mode to get rid of the \\text{} part
snippet sym "sympyblock" wA
\\text{sym $1 sy$0}
endsnippet

# the sympy snippet which does the heavy lifting 
priority 10000
snippet 'sym(.*)sym' "sympy" wrA
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

# End of sympy snippets

context "math()"
snippet bra "braket" bA
\\braket{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])_(\w)' "subscript" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`$1} $0
endsnippet

priority 100
context "math()"
snippet '(sin|cos|cot|csc|tan|ln|log|exp)' "ln" wrA
\\`!p snip.rv = match.group(1)`{${1:x}}
endsnippet

priority 200
context "math()"
snippet '(pi|int)' "ln" wrA
\\`!p snip.rv = match.group(1)`
endsnippet

context "math()"
snippet '(C|H|R)' "common sets" wrA
\\mathfrak{`!p snip.rv = match.group(1)`}
endsnippet

context "math()"
snippet lr "left( right)" iA
\\left( ${1:${VISUAL}} \\right) $0
endsnippet

context "math()"
snippet || "left| right|" iA
\left| ${1:${VISUAL}} \right| $0
endsnippet

context "math()"
snippet sum "sum" wA
\sum_{${1:n=1}}^{${2:\infty}} ${3:x^k}
endsnippet

context "math()"
snippet prod "product" wA
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

context "math()"
snippet lim "limit" w
\lim_{${1:x} \to ${2:\infty}}
endsnippet

context "math()"
snippet pd "partial derivative" wA
\frac{\partial ${1:f}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet sqrt "square root" iA
\\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet ^ "exponentiation" iA
^{$1}$0
endsnippet

context "math()"
snippet ~ "~" iA
\\sim
endsnippet

context "math()"
snippet txt "text" iA
\\text{$1}$0
endsnippet

context "math()"
snippet bf "boldface" iA
\\mathbf{$1}$0
endsnippet

context "math()"
snippet . "dot product" iA
\\cdot
endsnippet

context "math()"
snippet xx "cross product" iA
\\times
endsnippet

context "math()"
snippet eps "epsilon" iA
\\epsilon
endsnippet

context "math()"
snippet nab "nabla" iA
\\nabla
endsnippet

context "math()"
snippet sig "sigma" iA
\\sigma
endsnippet

context "math()"
snippet curl "curl" iA
\\nabla \\times 
endsnippet

context "math()"
snippet div "divergence" iA
\\nabla \\cdot 
endsnippet

context "math()"
snippet int "integral" iA
\int_a^b \! f(x) \, \mathrm{d}x
endsnippet
